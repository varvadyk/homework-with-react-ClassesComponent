{"version":3,"sources":["components/searchData/data.js","components/Contact/index.js","components/Contacts/index.js","App.js","serviceWorker.js","index.js"],"names":["firstName","lastName","phone","gender","Contact","className","undefined","Contracts","state","contacts","data","filterContact","search","handleSearchChange","event","setState","target","value","searchedContacts","ChangeData","filter","item","toLowerCase","includes","this","map","index","key","type","placeholder","onChange","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAAe,GACb,CACEA,UAAW,uCACXC,SAAU,qEACVC,MAAO,gBACPC,OAAQ,QAEV,CACEH,UAAW,iCACXC,SAAU,+DACVC,MAAO,gBACPC,OAAQ,UAEV,CACEH,UAAW,6CACXC,SAAU,mDACVC,MAAO,iBAET,CACEF,UAAW,iCACXC,SAAU,mDACVC,MAAO,gBACPC,OAAQ,UAEV,CACEH,UAAW,uCACXC,SAAU,yDACVC,MAAO,gBACPC,OAAQ,QAEV,CACEH,UAAW,uCACXC,SAAU,6CACVC,MAAO,gBACPC,OAAQ,S,sBCCIC,EA7BF,SAAC,GAAwC,IAAtCJ,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,OAExC,OACA,yBAAKE,UAAU,eACX,yBAAKA,UAAU,UAAS,kBAAC,IAAD,OACxB,yBAAKA,UAAU,gBACnB,yBAAKA,UAAU,eAAeL,EAA9B,IAA0CC,GAC1C,yBAAKI,UAAU,iBAAf,IAAiCH,EAAjC,KACA,yBAAKG,UAAU,kBAAf,IAA2C,SAATF,GAC9B,0BAAME,UAAU,YAChB,kBAAC,IAAD,OAGM,WAATF,GACG,0BAAME,UAAU,cAChB,kBAAC,IAAD,YAGMC,IAATH,GACG,0BAAME,UAAU,kBAChB,kBAAC,IAAD,WC6BOE,G,kNAlDdC,MAAQ,CACPC,SAAWC,EACXC,cAAeD,EACZE,OAAQ,I,EAIZC,mBAAmB,SAACC,GACnB,EAAKC,SACJ,CACCH,OAAOE,EAAME,OAAOC,QAErB,WACC,EAAKC,iBAAiB,EAAKV,MAAMI,Y,EAIpCM,iBAAiB,SAACD,GACjB,IACQE,EADG,YAAI,EAAKX,MAAMC,UACFW,QAAO,SAACC,GAChC,OACAA,EAAKpB,SAASqB,cAAcC,SAASN,EAAMK,gBAC3CD,EAAKrB,UAAUsB,cAAcC,SAASN,EAAMK,gBAC5CD,EAAKnB,MAAMqB,SAASN,MAIpB,EAAKF,SAAS,CACbJ,cAAcQ,K,uDAMf,IAAIV,EAAWe,KAAKhB,MAAMG,cAAcc,KAAI,SAACJ,EAAMK,GACjD,OAAO,kBAAC,EAAD,eAASC,IAAKN,EAAOK,GAAWL,OAG3C,OACC,yBAAKhB,UAAU,iBACd,yBAAKA,UAAU,kBACf,2BAAQuB,KAAK,OAAOC,YAAY,kBAAkBC,SAAUN,KAAKX,mBAAoBI,MAAOO,KAAKhB,MAAMI,UAExGH,EAASsB,OAAStB,EAAW,wD,GA5CNuB,cCWTC,MAVf,WACE,OACE,yBAAK5B,UAAU,OACZ,yBAAKA,UAAY,oBACpB,kBAAC,EAAD,SCGgB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82b5276e.chunk.js","sourcesContent":["export default [\r\n  {\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовский\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n  },\r\n  {\r\n    firstName: \"Робин\",\r\n    lastName: \"Щербатская\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\"\r\n  },\r\n  {\r\n    firstName: \"Аномный\",\r\n    lastName: \"Анонимус\",\r\n    phone: \"+380666666666\"\r\n  },\r\n  {\r\n    firstName: \"Лилия\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\"\r\n  },\r\n  {\r\n    firstName: \"Маршэн\",\r\n    lastName: \"Эриксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\"\r\n  },\r\n  {\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбэс\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n  }\r\n];","import React from 'react';\r\nimport './style.css';\r\nimport {FaUserCircle}  from \"react-icons/fa\";\r\nimport { AiOutlineMan } from \"react-icons/ai\";\r\n import {AiOutlineWoman}from \"react-icons/ai\";\r\n import {AiOutlineQuestion}from \"react-icons/ai\";\r\nconst Contact=({ firstName, lastName, phone,gender})=>{\r\n\r\n    return(\r\n    <div className=\"contact_box\">\r\n        <div className=\"avatar\"><FaUserCircle/></div>\r\n        <div className=\"contact_info\">\r\n    <div className=\"pib_content\">{firstName} {lastName}</div>\r\n    <div className=\"phone_content\"> {phone} </div>\r\n    <div className=\"gender_content\"> {gender===\"male\" &&(\r\n        <span className=\"man-icon\">\r\n        <AiOutlineMan />\r\n      </span>\r\n    )}\r\n    {gender===\"female\" &&(\r\n        <span className=\"women-icon\">\r\n        <AiOutlineWoman />\r\n      </span>\r\n    )} \r\n    {gender===undefined &&(\r\n        <span className=\"undefined-icon\">\r\n        <AiOutlineQuestion />\r\n      </span>\r\n    )}</div>\r\n    </div>\r\n    </div>\r\n    );\r\n\r\n    }\r\n\r\nexport default \tContact;\r\n","import React, { Component } from 'react';\r\nimport data from \"../searchData/data\";\r\nimport Contact from \"../Contact/index\";\r\nimport './style.css';\r\nclass Contracts extends Component{\r\n\tstate = {\r\n\t\tcontacts : data,\r\n\t\tfilterContact: data,\r\n\t\t   search: \"\",\r\n\r\n\t\t\r\n\t};\r\n\thandleSearchChange=(event)=>{\r\n\t\tthis.setState (\r\n\t\t\t{\r\n\t\t\t\tsearch:event.target.value\r\n\t\t\t},\r\n\t\t\t()=>{\r\n\t\t\t\tthis.searchedContacts(this.state.search);\r\n\t\t\t}\r\n\t\t\t);\r\n\t};\r\n\tsearchedContacts=(value)=>{\r\n\t\tconst date=[...this.state.contacts];\r\n\t   const ChangeData=date.filter((item)=>{\r\n\t\treturn(\r\n\t\titem.lastName.toLowerCase().includes(value.toLowerCase())||\r\n\t\titem.firstName.toLowerCase().includes(value.toLowerCase()) ||\r\n\t\titem.phone.includes(value)\r\n\t\t);\r\n\t\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\tfilterContact:ChangeData, \r\n\t});\r\n}\r\n\t\r\n\trender() {\r\n\r\n\t\tlet contacts = this.state.filterContact.map((item, index) => {\r\n\t\t  return <Contact key={item + index} {...item} />;\r\n\t\t});\r\n\t\t\r\nreturn(\r\n\t<div className=\"contacts_list\">\r\n\t\t<div className=\"contacts_input\">\r\n\t\t< input type=\"text\" placeholder=\"Search contact \" onChange={this.handleSearchChange} value={this.state.search}  />\r\n</div>\r\n{contacts.length ? contacts : <h2>No  such contact...</h2>}\r\n</div>\r\n);\r\n}\r\n}\r\n\r\n\r\nexport default Contracts;\r\n","import React from 'react';\nimport './App.css';\nimport './index.css';\nimport Contracts from './components/Contacts';\n \nfunction App() {\n  return (\n    <div className=\"App\">\n       <div className = \"contacts-wrapper\" >\n    <Contracts />\n   </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}